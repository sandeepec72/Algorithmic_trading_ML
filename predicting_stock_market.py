# -*- coding: utf-8 -*-
"""Predicting_Stock_Market.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oBbeF78EdUylNTdVUDDcgKIWUfmgpC-D

#Data Preparation
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import yfinance as yf

tickers=pd.read_html('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')[0]['Symbol']

print(tickers)

from sklearn.linear_model import LinearRegression
def test_it(opens,closes,preds,start_account=1000,thresh=0):
    account = start_account
    changes=[]
    
    for i in range(len(preds)):
        if(preds[i]-opens[i])/opens[i] >= thresh:
            account += account*(closes[i]-opens[i])/opens[i]
        changes.append(account)
    changes = np.array(changes)

    plt.plot(range(len(changes)),changes)
    plt.show()

    invest_total = start_account + start_account*(closes[-1]-opens[0])/opens[0]
    print('Investing Total:',invest_total,str(round((invest_total-start_account)/start_account*100,1))+ '%')
    print('Algo- trading Total:',account,str(round((account-start_account)/start_account*100,1))+ '%')

#Moving Average Convergence Divergence (MACD) 
def calc_macd(data,len1,len2,len3):
    shortEMA = data.ewm(span=len1,adjust=False).mean()
    longEMA = data.ewm(span=len2,adjust=False).mean()
    MACD = shortEMA - longEMA
    signal = MACD.ewm(span=len3,adjust=False).mean()
    return MACD,signal

def calc_rsi(data,period):
    delta= data.diff()
    up = delta.clip(lower=0)
    down = -1*delta.clip(upper=0) # to make positive output
    ema_up = up.ewm(com=period,adjust=False).mean() #ema is exponential moving avg
    ema_down = down.ewm(com=period,adjust=False).mean()
    rs = ema_up / ema_down
    rsi = 100 - (100/(1+rs))
    return rsi

def calc_bollinger(data,period):
    mean = data.rolling(period).mean()
    std = data.rolling(period).std()
    upper_band = np.array(mean) + 2*np.array(std)
    lower_band = np.array(mean) - 2*np.array(std)
    return upper_band,lower_band

for ticker in tickers[0:10]:
    end_date = datetime.now()
    start_date = end_date - timedelta(days=15*365)

    history = yf.download(ticker,start_date,end=end_date,interval='1d',prepost=False)
    history=history.loc[:,['Open','Close','Volume']]

    history['Prev_Close']= history.loc[:,'Close'].shift(1)
    history['Prev_Volume']= history.loc[:,'Volume'].shift(1)

    datetimes=history.index.values
    weekdays=[]

    for dt in datetimes:
        #print(dt) #2007-07-23T00:00:00.000000000
        dt= datetime.strptime(str(dt),'%Y-%m-%dT%H:%M:%S.000000000')
        #print(dt)
        weekdays.append(dt.weekday())
    history['Weekday'] = weekdays

    history['5SMA'] = history['Prev_Close'].rolling(5).mean()
    history['10SMA'] = history['Prev_Close'].rolling(10).mean()
    history['20SMA'] = history['Prev_Close'].rolling(20).mean()
    history['50SMA'] = history['Prev_Close'].rolling(50).mean()
    history['100SMA'] = history['Prev_Close'].rolling(100).mean()
    history['200SMA'] = history['Prev_Close'].rolling(200).mean()
    
    MACD, signal = calc_macd(history['Prev_Close'],12,26,9)
    history['MACD']= MACD
    history['MACD_signal'] = signal

    history['RSI']=calc_rsi(history['Prev_Close'],13)
    history['RSI_Volume']=calc_rsi(history['Prev_Volume'],13)


    upper,lower=calc_bollinger(history['Prev_Close'],20)
    history['Upper_Band']=upper
    history['Lower_Band']=lower

    labels = ['Prev_Close',	'Prev_Volume',	'5SMA',	'10SMA',	'20SMA',	'50SMA',	'100SMA',	'200SMA',	'MACD',	'MACD_signal',	'RSI',	'RSI_Volume',	'Upper_Band',	'Lower_Band']
    period=1
    new_labels=[str(period)+'d_'+label for label in labels]
    #print(new_labels)
    history[new_labels]=history[labels].pct_change(period,fill_method='ffill') #percentage change

    period=2
    new_labels=[str(period)+'d_'+label for label in labels]
    #print(new_labels)
    history[new_labels]=history[labels].pct_change(period,fill_method='ffill')

    period=5
    new_labels=[str(period)+'d_'+label for label in labels]
    #print(new_labels)
    history[new_labels]=history[labels].pct_change(period,fill_method='ffill')

    period=10
    new_labels=[str(period)+'d_'+label for label in labels]
    #print(new_labels)
    history[new_labels]=history[labels].pct_change(period,fill_method='ffill')

    history=history.replace(np.inf,np.nan).dropna() #dropping the rows with nan, basically first 200 rows which do not have sma values

    y = history['Close']
    X = history.drop(['Close','Volume'],axis=1).values

    num_test = 365
    X_train = X[:-1*num_test]
    y_train = y[:-1*num_test]
    X_test = X[-1*num_test:]
    y_test = y[-1*num_test:]

    #print(X_train.shape,y_train.shape,X_test.shape,y_test.shape)

    model = LinearRegression()
    model = model.fit(X_train,y_train)
    preds = model.predict(X_test)

    print(ticker)

    test_it(X_test.T[0],y_test,preds,1000,0.005)

for ticker in tickers[0:1]:
    end_date = datetime.now()
    start_date = end_date - timedelta(days=15*365)

    history = yf.download(ticker,start_date,end=end_date,interval='1d',prepost=False)
    history=history.loc[:,['Open','Close','Volume']]

    history['Prev_Close']= history.loc[:,'Close'].shift(1)
    history['Prev_Volume']= history.loc[:,'Volume'].shift(1)

    datetimes=history.index.values
    weekdays=[]

    for dt in datetimes:
        #print(dt) #2007-07-23T00:00:00.000000000
        dt= datetime.strptime(str(dt),'%Y-%m-%dT%H:%M:%S.000000000')
        #print(dt)
        weekdays.append(dt.weekday())
    history['Weekday'] = weekdays

    history['5SMA'] = history['Prev_Close'].rolling(5).mean()
    history['10SMA'] = history['Prev_Close'].rolling(10).mean()
    history['20SMA'] = history['Prev_Close'].rolling(20).mean()
    history['50SMA'] = history['Prev_Close'].rolling(50).mean()
    history['100SMA'] = history['Prev_Close'].rolling(100).mean()
    history['200SMA'] = history['Prev_Close'].rolling(200).mean()
    
    MACD, signal = calc_macd(history['Prev_Close'],12,26,9)
    history['MACD']= MACD
    history['MACD_signal'] = signal

    history['RSI']=calc_rsi(history['Prev_Close'],13)
    history['RSI_Volume']=calc_rsi(history['Prev_Volume'],13)


    upper,lower=calc_bollinger(history['Prev_Close'],20)
    history['Upper_Band']=upper
    history['Lower_Band']=lower

    labels = ['Prev_Close',	'Prev_Volume',	'5SMA',	'10SMA',	'20SMA',	'50SMA',	'100SMA',	'200SMA',	'MACD',	'MACD_signal',	'RSI',	'RSI_Volume',	'Upper_Band',	'Lower_Band']
    period=1
    new_labels=[str(period)+'d_'+label for label in labels]
    #print(new_labels)
    history[new_labels]=history[labels].pct_change(period,fill_method='ffill') #percentage change

    period=2
    new_labels=[str(period)+'d_'+label for label in labels]
    #print(new_labels)
    history[new_labels]=history[labels].pct_change(period,fill_method='ffill')

    period=5
    new_labels=[str(period)+'d_'+label for label in labels]
    #print(new_labels)
    history[new_labels]=history[labels].pct_change(period,fill_method='ffill')

    period=10
    new_labels=[str(period)+'d_'+label for label in labels]
    #print(new_labels)
    history[new_labels]=history[labels].pct_change(period,fill_method='ffill')

    history=history.replace(np.inf,np.nan).dropna() #dropping the rows with nan, basically first 200 rows which do not have sma values
    x=history.index.values
    
    plt.figure(figsize=(15,8)) #enlarging fig
    plt.plot(x,history['Prev_Close'],color='blue')

    plt.plot(x,history['50SMA'],color='green')
    plt.plot(x,history['200SMA'],color='red')
    plt.plot(x,history['Upper_Band'],color='orange')
    plt.plot(x,history['Lower_Band'],color='orange')
    plt.xlim(x[1000],x[1500])
    plt.ylim(60,120)
    plt.show()

    plt.figure(figsize=(15,3))
    colors = np.array(['green']*len(history['MACD']))
    colors[history['MACD']<0]='red'
    plt.bar(x,history['MACD'],color=colors)
    plt.plot(x,history['MACD_signal'],color='blue')
    plt.xlim(x[1000],x[1500])
    plt.show()

    plt.figure(figsize=(15,3))

    plt.plot(x,history['RSI'],color='purple')
    plt.plot([x[0],x[-1]],[80,80],color = 'red')
    plt.plot([x[0],x[-1]],[20,20],color = 'green')

    plt.xlim(x[1000],x[1500])
    plt.ylim(0,100)
    plt.show()



    display(history)

"""#Linear Regression"""

from sklearn.linear_model import LinearRegression
def test_it(opens,closes,preds,start_account=1000,thresh=0):
    account = start_account
    changes=[]
    
    for i in range(len(preds)):
        if(preds[i]-opens[i])/opens[i] >= thresh:
            account += account*(closes[i]-opens[i])/opens[i]
        changes.append(account)
    changes = np.array(changes)

    plt.plot(range(len(changes)),changes)
    plt.show()

    invest_total = start_account + start_account*(closes[-1]-opens[0])/opens[0]
    print('Investing Total:',invest_total,str(round((invest_total-start_account)/start_account*100,1))+ '%')
    print('Algo- trading Total:',account,str(round((account-start_account)/start_account*100,1))+ '%')

from sklearn.linear_model import LinearRegression

y = history['Close']
X = history.drop(['Close','Volume'],axis=1).values

num_test = 365
X_train = X[:-1*num_test]
y_train = y[:-1*num_test]
X_test = X[-1*num_test:]
y_test = y[-1*num_test:]

#print(X_train.shape,y_train.shape,X_test.shape,y_test.shape)

model = LinearRegression()
model = model.fit(X_train,y_train)
preds = model.predict(X_test)

print(ticker)

test_it(X_test.T[0],y_test,preds,1000,0.0)
#The code is copied and executed in 8th section of Data interpretation (starting of the code) 
plt.figure(figsize=(15,5))
plt.plot(range(len(y_test)),y_test,'blue')
plt.plot(range(len(preds)),preds,'red')
plt.show()



"""#SP500 Data Preparation"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf
from datetime import datetime
import time

tickers = pd.read_html('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')[0]['Symbol']
print(tickers)

yearly_combined = pd.DataFrame()

for ticker in tickers[0:2]:
    start = time.time()
    try:
        stock = yf.Ticker(ticker)
        info = stock.info
        #display(info)
        
        balance = stock.balance_sheet
        financials = stock.financials
        earnings = stock.earnings
        cashflow = stock.cashflow
        #display(balance)
        #display(financials)
        #display(earnings)
        #display(cashflow)

        start_dates=balance.columns.values
        end_dates = start_dates + np.timedelta64(366,'D')

        start_dates = [str(date)[:-19] for date in start_dates]
        end_dates = [str(date)[:-19] for date in end_dates]
        #print(start_dates)
        year1 = stock.history(start=start_dates[0],end = end_dates[0],period='day').reset_index(drop=True)
        year2 = stock.history(start=start_dates[1],end = end_dates[1],period='day').reset_index(drop=True)
        year3 = stock.history(start=start_dates[2],end = end_dates[2],period='day').reset_index(drop=True)
        year4 = stock.history(start=start_dates[3],end = end_dates[3],period='day').reset_index(drop=True)
        #display(year4)

        columns=earnings.T.columns.values
        #print(columns)
        balance.columns = columns
        financials.columns=columns
        earnings = earnings.T
        cashflow.columns = columns
        cashflow = cashflow.drop(['Net Income'], axis=0)

        yearly= pd.concat([balance,financials, cashflow, earnings]).T
        #display(yearly)
        columns = yearly.columns.values
        #print(columns)

    #liquidity
        #current ratio = current assets/current liabilities
        yearly['current_ratio'] = yearly['Total Current Assets']/yearly['Total Current Liabilities']

        #Quick ratio = (cash + cash equivalents + temp. investments + accounts receivable) / current liabilities
        yearly['quick_ratio']= yearly['Total Current Assets']
        if 'Inventory' in columns:
            yearly['quick_ratio'] += yearly['Inventory']
        yearly['quick_ratio'] /= yearly['Total Current Liabilities']

        #Cash ratio = (cash + cash equivalents) / current liabilities
        yearly['cash_ratio']= yearly['Cash']
        if 'Short Term Investments' in columns:
            yearly['cash_ratio'] += yearly['Short Term Investments']
        yearly['cash_ratio'] /= yearly['Total Current Liabilities']

        #Operating cash flow = operating cash flow/ current liabilities
        yearly['operating_cashflow'] = yearly['Total Cash From Operating Activities'] / yearly['Total Current Liabilities']

        #Equity ratio = total equity / total assets
        yearly['equity_ratio'] = yearly['Total Stockholder Equity'] / yearly['Total Assets']

    #Leverage
        #debt to equity = total liabilities / shareholder equity
        yearly['debt_to_equity'] = yearly['Total Liab'] / yearly['Total Stockholder Equity']

        #debt to assets = total liabilities / total assets
        yearly['debt_to_assets'] = yearly['Total Liab'] / yearly['Total Assets']
        
        #interest coverage = operating income / interest expenses
        yearly['interest_coverage'] = yearly['Operating Income'] / yearly['Interest Expense']

    #efficiency
        #asset turnover = revenue/ total assets
        yearly['asset_turnover'] = yearly['Revenue'] / yearly['Total Assets']

        #RECEIVABLES TURNOVER = revenue / accounts receivables
        if 'Net Receivables' in columns:
            yearly['receivables_turnover'] = yearly['Revenue'] / yearly['Net Receivables']
        else: 
            yearly['receivables_turnover'] = np.nan
    
    
    #Profitability
        #gross margin = gross profit/revenue
        yearly['gross_margin'] =yearly['Gross Profit'] / yearly['Revenue']
        
        #profit margin = net income / revenue
        yearly['profit_margin'] =yearly['Net Income'] / yearly['Revenue']

        #operating margin = operating income / revenue
        yearly['operating_margin'] =yearly['Operating Income'] / yearly['Revenue']

        #return on equity = net income / shareholder equity
        yearly['return_on_equity'] =yearly['Net Income'] / yearly['Total Stockholder Equity']

        #return on assets =  net income / total assets
        yearly['return_on_assets'] =yearly['Net Income'] / yearly['Total Assets']
        shareprice = np.array([year4.loc[0,'Close'],year3.loc[0,'Close'],year2.loc[0,'Close'],year1.loc[0,'Close']])

        #eps = earning/total shares outstanding
        if 'Issuance of Stock' in columns:
            yearly['eps']= yearly['Earnings'] / yearly['Issuance Of Stock']
        else:
            yearly['eps'] = yearly['Earnings'] / info['sharesOutstanding']

        #p/e = share price / eps
        yearly['p/e'] = shareprice / yearly['eps']

        yearly['ticker']=ticker
        yearly['sector']=info['sector']
        yearly['year']=yearly.index.values
        #display(yearly)

        startprice=np.array([year4.loc[1,'Open'],year3.loc[1,'Open'],year2.loc[1,'Open'],year1.loc[1,'Open'] ])
        endprice=np.array([year4.loc[len(year4)-1,'Close'],year3.loc[len(year3)-1,'Close'],year2.loc[len(year2)-1,'Close'],year1.loc[len(year1)-1,'Close']])
        pctdiff = (endprice-startprice)/startprice
        yearly['result']= pctdiff
        #display(yearly)

        columns = ['ticker','year','sector','current_ratio', 'quick_ratio','cash_ratio','operating_cashflow','equity_ratio',
                   'debt_to_equity','debt_to_assets','interest_coverage','asset_turnover','receivables_turnover','gross_margin',
                   'profit_margin','operating_margin','return_on_equity','return_on_assets','eps','p/e','result']
        yearly=yearly[columns].reset_index(drop=True)

        if yearly_combined.empty:
            yearly_combined = yearly
        else:
            yearly_combined = pd.concat([yearly_combined,yearly]).reset_index(drop=True)
    except Exception as e:
        print(ticker,e)

    time_diff = time.time() - start
    if time_diff < 10:
        time.sleep(10-time_diff)

display(yearly_combined)
yearly_combined.to_csv('combined.csv',index=False)

pip install yfinance

print(columns)

"""#Logistic Regression"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import yfinance as yf

data = pd.read_csv('sp500_data.csv')
data['sector']=data['sector'].astype('category')
data['sector']=data['sector'].cat.codes

data.dropna(subset=['result'],inplace=True)

#plt.hist(data['result'])

bins=[-10,0,0.25,0.5,10]
data['result_bin'] = pd.cut(data['result'],bins).astype('category').cat.codes

pct_change = data['result']

data = data.drop(['result'],axis=1)
#display(data)
X = data[data.columns[2:-1]]
y = data['result_bin']
#display(data.isna().sum())
#display(data['result_bin'])

train_idx = data[data['year']<2020].index.values
test_idx = data[data['year']==2020].index.values

X_train = X.loc[train_idx]
X_test = X.loc[test_idx]
y_train = y.loc[train_idx]
y_test = y.loc[test_idx]

IQR = X_train.quantile(.75) - X_train.quantile(.25)
lower = X_train.quantile(.25) - 1.5*IQR
upper = X_train.quantile(.75) + 1.5*IQR

for i in X_train.columns:
    X_train.loc[X_train[i]<lower[i],i]= lower[i]
    X_train.loc[X_train[i]>upper[i],i]= upper[i]

    X_test.loc[X_test[i]<lower[i],i]= lower[i]
    X_test.loc[X_test[i]>upper[i],i]= upper[i]

    X_test[i].fillna(X_train[i].median(),inplace=True) #filling missing values
    X_train[i].fillna(X_train[i].median(),inplace=True)

    X_test[i] = (X_test[i] - X_train[i].min())/(X_train[i].max()-X_train[i].min())
    X_train[i] = (X_train[i] - X_train[i].min())/(X_train[i].max()-X_train[i].min())

print(X_train.shape,X_test.shape,y_train.shape,y_test.shape)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

model = LogisticRegression(max_iter=1000)
model = model.fit(X_train,y_train)
preds = model.predict(X_test)

print("accuracy Score: ",accuracy_score(preds,y_test))

print(preds)
#print(y_test.values)

print(pct_change[test_idx].mean())
print(pct_change[y_test[preds>0].index.values].mean())
print(pct_change[y_test[preds>2].index.values].mean()) #10% more returns

